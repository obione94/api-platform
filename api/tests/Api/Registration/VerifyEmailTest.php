<?php

namespace App\Tests\Api\Registration;

use App\Entity\User;
use App\Security\Token\ConfirmationEmailToken;
use App\Tests\Tools\AbstractApiTestCase;
use Symfony\Contracts\HttpClient\Exception\TransportExceptionInterface;



class VerifyEmailTest extends AbstractApiTestCase
{

    const API_REGISTRATION = "/api/verify_email";
    const HEADERS = ['Content-Type' => 'application/json'];
    private ConfirmationEmailToken $confirmationEmailToken;

    public function setUp() : void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @dataProvider VerifyEmailProviderBadMethod
     * @throws TransportExceptionInterface
     */
    public function testVerifyEmailBadMethod($method, $url, $headersParams, $codeResponse): void
    {
        self::createClient()->request($method, $url, $headersParams);
        $this->assertResponseStatusCodeSame($codeResponse);
    }

    public function VerifyEmailProviderBadMethod() :array
    {
        return [
            [
                'GET',
                self::API_REGISTRATION,
                [
                    'headers' => self::HEADERS,
                    'json' => [
                        'token' => 'test@example.com',
                    ]
                ],
                405
            ],
            [
                'POST',
                self::API_REGISTRATION,
                [
                    'headers' => self::HEADERS,
                    'json' => [
                        'token' => 'test@example.com',
                    ]
                ],
                405
            ],
            [
                'PATCH',
                self::API_REGISTRATION,
                [
                    'headers' => self::HEADERS,
                    'json' => [
                        'token' => 'test@example.com',
                    ]
                ],
                405
            ],
            [
                'DELETE',
                self::API_REGISTRATION,
                [
                    'headers' => self::HEADERS,
                    'json' => [
                        'token' => 'test@example.com',
                    ]
                ],
                405
            ],
        ];
    }

    /**
     * @dataProvider VerifyEmailProviderBadToken
     * @throws TransportExceptionInterface
     */
    public function testVerifyEmailBadToken($method, $url, $headersParams, $codeResponse, $jsoncontains): void
    {
        self::createClient()->request($method, $url, $headersParams);
        $this->assertJsonContains($jsoncontains);
        $this->assertResponseStatusCodeSame($codeResponse);
    }

    public function VerifyEmailProviderBadToken() :array
    {
        $confirmationEmailToken = static::getContainer()->get(ConfirmationEmailToken::class);
        $usertoken = new User();
        $usertoken->setUserName("totoro");
        $tokenbadEmail = $confirmationEmailToken->generateConfirmationEmailToken($usertoken, 600);
        $usertoken->setUserName("test@example3.com");
        $tokenExpired = $confirmationEmailToken->generateConfirmationEmailToken($usertoken, 0);

        return [
            [
                'PUT',
                self::API_REGISTRATION,
                [
                    'headers' => self::HEADERS,
                    'json' => [
                        'token' => $tokenbadEmail,
                    ]
                ],
                401,
                ["message"=> "JWT Token not found"],
            ], [
                'PUT',
                self::API_REGISTRATION,
                [
                    'headers' => self::HEADERS,
                    'json' => [
                        'token' => $tokenExpired,
                    ]
                ],
                401,
                ["message"=> "JWT Token not found"],
            ],
        ];
    }

    public function testVerifyEmailGoodToken(): void
    {
        $repositoryUser = static::getContainer()->get('doctrine')->getRepository(User::class);
        $user = new User();
        $user->setUserName("test@example3.com");
        $password = static::getContainer()->get('security.password_hasher')->hashPassword($user, '$3CR3T');
        $user->setPassword($password);
        $user->setRoles(["ROLE_ADMIN"]);
        $user->setIsVerified(false);
        $repositoryUser->save($user, true);
        $confirmationEmailToken = static::getContainer()->get(ConfirmationEmailToken::class);

        self::createClient()->request('PUT', self::API_REGISTRATION, [
            'headers' => self::HEADERS,
            'json' => [
                'token' => $confirmationEmailToken->generateConfirmationEmailToken($user, 300),
            ]
        ]);
        $this->assertJsonContains([
            '@context' => '/contexts/User',
            '@type' => 'User',
            'userName' => 'test@example3.com',
            'isVerified' => true,
        ]);
        $this->assertResponseStatusCodeSame(200);
    }

}
