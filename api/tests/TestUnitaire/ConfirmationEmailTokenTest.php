<?php

namespace App\Tests\TestUnitaire;

use App\Entity\User;
use App\Repository\UserRepository;
use App\Security\Token\ConfirmationEmailToken;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;

class ConfirmationEmailTokenTest  extends KernelTestCase
{
    private ConfirmationEmailToken $confirmationEmailToken;

    public function setUp() : void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $repositoryUser = static::getContainer()->get('doctrine')->getRepository(User::class);
        $this->confirmationEmailToken = static::getContainer()->get(ConfirmationEmailToken::class);
        $user = new User();
        $user->setUserName("test@example3.com");
        $password = static::getContainer()->get('security.password_hasher')->hashPassword($user, '$3CR3T');
        $user->setPassword($password);
        $user->setRoles(["ROLE_ADMIN"]);
        $user->setIsVerified(false);
        $repositoryUser->save($user, true);
    }

    /**
     * @dataProvider payloadInvalidProvider
     */
    public function testTokenIsInvalid(string $email, int $duration)
    {
        $user = new User();
        $user->setUserName($email);
        $token = $this->confirmationEmailToken->generateConfirmationEmailToken($user, $duration);
        $this->assertFalse($this->confirmationEmailToken->isValidToken($token));
    }

    public function payloadInvalidProvider(): array
    {
        return [
            [
                "toto",
                600
            ],
            [
               "test@example3.com",
                0
            ],
        ];
    }

    public function testTokenIsValid()
    {
        $user = new User();
        $user->setUserName("test@example3.com");
        $token = $this->confirmationEmailToken->generateConfirmationEmailToken($user, 5);
        $this->assertTrue($this->confirmationEmailToken->isValidToken($token));
    }

}
